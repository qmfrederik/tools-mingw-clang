name: Compile GNUstep
on:
  push:
  pull_request:
    
jobs:
  msys2:
    strategy:
      matrix:
        os: [ windows-2019 ]
        msystem: [ mingw64 ]
        abi: [ gcc, gnustep-2.0 ]
        runtime: [ gcc-objc, libobjc2 ]          
        exclude:
          - runtime: gcc
            abi: gnustep-2.0
        include:
          - abi: gcc
            library-combo: gnu-gnu-gnu
            linker-flags: -fuse-ld=lld
          - abi: gnustep-2.0
            library-combo: ng-gnu-gnu
            linker-flags: -fuse-ld=lld -lstdc++ -lgcc_s
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.msystem }} ${{ matrix.runtime }} (${{ matrix.abi }})
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v3
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: ansible
    - name: Run Ansible script
      run: |
        ansible-playbook --connection=local --inventory 127.0.0.1, --limit 127.0.0.1 ./playbook.yml --extra-vars "runtime=${{ matrix.runtime }}"

    - name: Compile libobjc2
      run: |
        cd ~/git/libobjc2/build
        CC=clang CXX=clang++ LDFLAGS="-fuse-ld=lld -lstdc++ -lgcc_s" cmake .. -DOLDABI_COMPAT=ON
        cmake --build . -j$(nproc)
        cmake --install . --prefix=/mingw64
        cp /mingw64/lib/objc.dll /mingw64/bin/
        git archive HEAD --format=zip --output=$HOME/dist/libobjc2-$(git rev-parse --short HEAD).zip
        cmake --install . --prefix=$HOME/dist/
      if: matrix.runtime == 'libobjc2'

    - name: Install gcc-objc
      run: |
        pacman -S --noconfirm mingw-w64-x86_64-gcc-objc
      if: matrix.runtime == 'gcc-objc'

    - name: Compile tools-make
      run: |
        cd ~/git/tools-make/
        CC=clang CXX=clang++ LDFLAGS="${{ matrix.linker-flags }}" ./configure --with-library-combo=${{ matrix.library-combo }} --with-runtime-abi=${{ matrix.abi }}
        make -j$(nproc)
        make install
        git archive HEAD --format=zip --output=$HOME/dist/tools-make-$(git rev-parse --short HEAD).zip

    - name: Compile libs-base
      run: |
        cd ~/git/libs-base/
        ./configure
        make -j$(nproc)
        make install
        git archive HEAD --format=zip --output=$HOME/dist/libs-base-$(git rev-parse --short HEAD).zip
        make dist
        mv ../gnustep-base-*.tar.gz ~/dist

    - name: Compile libs-gui
      run: |
        cd ~/git/libs-gui/
        ./configure
        make -j$(nproc)
        make install
        git archive HEAD --format=zip --output=$HOME/dist/libs-gui-$(git rev-parse --short HEAD).zip
        make dist
        mv ../gnustep-gui-*.tar.gz ~/dist

    - name: Compile libs-back
      run: |
        cd ~/git/libs-back/
        . /mingw64/share/GNUstep/Makefiles/GNUstep.sh
        ./configure --enable-graphics=cairo
        make -j$(nproc)
        make install
        git archive HEAD --format=zip --output=$HOME/dist/libs-back-$(git rev-parse --short HEAD).zip
        make dist
        mv ../gnustep-back-*.tar.gz ~/dist

    - name: Compile plugins-themes-WinUXTheme
      run: |
        cd ~/git/plugins-themes-WinUXTheme/
        make -j$(nproc)
        make install
        git archive HEAD --format=zip --output=$HOME/dist/plugins-themes-WinUXTheme-$(git rev-parse --short HEAD).zip
        make dist
        mv ../WinUXTheme*.tar.gz ~/dist

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: ~/dist/
